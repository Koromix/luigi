# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see https://www.gnu.org/licenses/.

window_size = get_window_size()

WORDS = [
    "Pellucide"
    "Croquignole"
    "Emoucher"
    "Logomachie"
    "Floche"
    "Boulingrin"
    "Oryctolagus"
]
COLORS = [
    "RED"
    "BLACK"
    "LIME"
    "PURPLE"
]
SPEED = 3
PLAYER_SCALE = 0.15
WALL_SCALE = 0.4
GRAVITY = 0.05
SPRITES = {
    player = load_image("luigi/examples/words/assets/player.png")
    brick = load_image("luigi/examples/words/assets/iron.png")
}
BACKGROUNDS = [
    load_image("luigi/examples/words/assets/aurora.png")
    load_image("luigi/examples/words/assets/flames.png")
    load_image("luigi/examples/words/assets/forest.png")
    load_image("luigi/examples/words/assets/lonely.png")
    load_image("luigi/examples/words/assets/nebula.png")
    load_image("luigi/examples/words/assets/starfield.png")
    load_image("luigi/examples/words/assets/station.png")
]

walls = null
background = null
player = null
grap = null
words = null
time = null
pause_words = null
show_counter = null

gameover = null

init()
run_window("Words!", { background = "BLACK" }, run)

func init()
    walls = create_walls()
    background = 0
    player = {
        x = window_size.width / 2, y = window_size.height / 2
        vx = 0, vy = 0
        ax = 0, ay = 0
        angle = 0
        health = 5
    }
    grap = null
    words = []
    time = 0
    pause_words = false
    show_counter = false

    gameover = null
end

func create_walls()
    walls = []

    factor = sqrt(window_size.width * window_size.height) / 750
    floors = random_int(floor(4 * factor), ceil(16 * factor))

    while floors > 0
        collide = true
        while collide
            x1 = random_int(0, window_size.width - 40)
            y1 = random_int(0, window_size.height)
            x2 = min(window_size.width, x1 + SPRITES.brick.width * WALL_SCALE * random_int(2, ceil(8 * factor)))

            wall = {
                x1 = x1
                y1 = y1
                x2 = x2
                y2 = y1
                x = (x1 + x2) / 2
                y = y1
                width = x2 - x1
                height = 40
            }
            collide = false

            for it in walls
                if it.x1 - 40 < wall.x2 + 40 and it.x2 + 40 >= wall.x1 - 40 and it.y1 - 40 < wall.y2 + 40 and it.y2 + 40 >= wall.y1 - 40
                    collide = true
                    break
                end
            end
        end

        append(walls, wall)

        floors = floors - 1
    end

    return walls
end

func run()
    window_size = get_window_size()

    # Inputs

    if (is_key_down("left") or is_key_down("a")) and player.vx > -5 then player.vx = player.vx - 0.5
    if (is_key_down("right") or is_key_down("d")) and player.vx < 5 then player.vx = player.vx + 0.5
    if (is_key_pressed("space") or is_key_pressed("up")) and abs(player.vy) < 0.2 then player.vy = -5

    if is_key_pressed("tab") then show_counter = not show_counter
    if is_key_pressed("f") then set_fullscreen(not is_fullscreen())
    if is_key_pressed("p") then pause_words = not pause_words
    if is_key_pressed("b")
        background = background + 1
        if background >= length(BACKGROUNDS) then background = 0
    end
    if is_key_pressed("r") then init()
    if is_key_pressed("k") then player.health = 0

    if gameover = null
        run_game()
        draw_game()
    else
        draw_game()
        draw_gameover()

        gameover = gameover + 1
    end
end

func run_game()
    # Determined through a very scientific method of trial and error

    if not pause_words then time = time + 1
    probability = clamp(sqrt(window_size.width * window_size.height) / 15000, 0, 1)
    speed = SPEED * probability * 10
    probability = probability * (1 + time / 10000)

    # Create words

    if random() < probability and not pause_words
        idx = random_int(0, length(WORDS))
        color = random_int(0, length(COLORS))
        size = random_int(30, 50)

        dir_rnd = random()
        dimensions = measure_text(upper(WORDS[idx]), size)

        word = {
            x = null
            y = null
            vx = 0
            vy = 0

            width = dimensions.width
            height = dimensions.height
            color = COLORS[color]
            size = size

            word = WORDS[idx]
        }

        if dir_rnd < 0.25
            word.x = window_size.width + word.width / 2
            word.y = random_int(floor(word.height / 2), ceil(window_size.height - word.height / 2))
            word.vx = -random_float(0.8, 2)
        else if dir_rnd < 0.5
            word.x = random_int(floor(word.width / 2), ceil(window_size.width - word.width / 2))
            word.y = window_size.height + word.height / 2
            word.vy = -random_float(0.8, 2)
        else if dir_rnd < 0.75
            word.x = -word.width / 2
            word.y = random_int(floor(word.height / 2), ceil(window_size.height - word.height / 2))
            word.vx = random_float(0.8, 2)
        else
            word.x = random_int(floor(word.width / 2), ceil(window_size.width - word.width / 2))
            word.y = -word.height / 2
            word.vy = random_float(0.8, 2)
        end

        append(words, word)
    end

    # Update words

    new_words = []
    for word in words
        if not pause_words
            word.x = word.x + word.vx * speed
            word.y = word.y + word.vy * speed
        end
        if word.x >= -word.width and word.x < window_size.width + word.width and word.y >= -word.height and word.y < window_size.height + word.height then append(new_words, word)
    end
    words = new_words

    # Border collisions

    if player.x < SPRITES.player.width * PLAYER_SCALE / 2 and player.vx < 0
        player.vx = -0.2 * player.vx
    else if player.x > window_size.width - SPRITES.player.width * PLAYER_SCALE / 2 and player.vx > 0
        player.vx = -0.2 * player.vx
    end
    if player.y < SPRITES.player.height * PLAYER_SCALE / 2 and player.vy < 0
        player.vx = 0.98 * player.vx
        player.vy = -0.2 * player.vy
    else if player.y > window_size.height - SPRITES.player.height * PLAYER_SCALE / 2 and player.vy > 0
        player.vx = 0.98 * player.vx
        player.vy = -0.2 * player.vy
    end

    # Wall collisions

    for wall in walls
        x1 = wall.x1 - 15
        x2 = wall.x2 + 20
        y1 = wall.y1 - 15
        y2 = wall.y2 + 20

        collision = true
        collision = collision and (player.x + SPRITES.player.width * PLAYER_SCALE / 2 >= x1)
        collision = collision and (player.x - SPRITES.player.width * PLAYER_SCALE / 2 <= x2)
        collision = collision and (player.y + SPRITES.player.height * PLAYER_SCALE / 2 >= y1)
        collision = collision and (player.y - SPRITES.player.height * PLAYER_SCALE / 2 <= y2)

        if collision
            if player.x < x1 and player.x + SPRITES.player.width * PLAYER_SCALE / 2 >= x1 and player.vx > 0
                player.vx = -0.2 * player.vx
                player.ax = 0
            else if player.x < x2 and player.x + SPRITES.player.width * PLAYER_SCALE / 2 >= x2 and player.vx < 0
                player.vx = -0.2 * player.vx
                player.ax = 0
            end

            if player.y < y1 and player.y + SPRITES.player.height * PLAYER_SCALE / 2 >= y1 and player.vy > 0
                player.vy = -0.2 * player.vy
                player.ay = 0
            else if player.y < y2 and player.y + SPRITES.player.height * PLAYER_SCALE / 2 >= y2 and player.vy < 0
                player.vy = -0.2 * player.vy
                player.ay = 0
            end
        end
    end

    # Word collisions

    for word in words
        x1 = word.x - word.width / 2
        x2 = word.x + word.width / 2
        y1 = word.y - word.height / 2
        y2 = word.y + word.height / 2

        collision = true
        collision = collision and (player.x + SPRITES.player.width * PLAYER_SCALE / 2 >= x1)
        collision = collision and (player.x - SPRITES.player.width * PLAYER_SCALE / 2 <= x2)
        collision = collision and (player.y + SPRITES.player.height * PLAYER_SCALE / 2 >= y1)
        collision = collision and (player.y - SPRITES.player.height * PLAYER_SCALE / 2 <= y2)

        if collision
            if player.x < x1 and player.x + SPRITES.player.width * PLAYER_SCALE / 2 >= x1 and player.vx > 0
                player.vx = -0.2 * player.vx - word.vx * speed
                player.vy = player.vy + (word.vy * speed - player.vy) * 0.5
                player.ax = 0
            else if player.x < x2 and player.x + SPRITES.player.width * PLAYER_SCALE / 2 >= x2 and player.vx < 0
                player.vx = -0.2  * player.vx + word.vx * speed
                player.vy = player.vy + (word.vy * speed - player.vy) * 0.5
                player.ax = 0
            end

            if player.y < y1 and player.y + SPRITES.player.height * PLAYER_SCALE / 2 >= y1 and player.vy > 0
                player.vx = player.vx + (word.vx * speed - player.vx) * 0.5
                player.vy = -0.2 * player.vy - word.vy * speed
                player.ay = 0
            else if player.y < y2 and player.y + SPRITES.player.height * PLAYER_SCALE / 2 >= y2 and player.vy < 0
                player.vx = player.vx + (word.vx * speed - player.vx) * 0.5
                player.vy = -0.2 * player.vy + word.vy * speed
                player.ay = 0
            end

            speed2 = sqrt((player.vx - word.vx) * (player.vx - word.vx) + (player.vy - word.vy) * (player.vy - word.vy))
            if speed2 > 3
                player.health = player.health - 1
            end
        end
    end

    # Update player

    player.angle = player.angle + sqrt(player.vx * player.vx + player.vy * player.vy) / 10
    player.x = player.x + player.vx
    player.y = player.y + player.vy
    player.ax = 0.5 * player.ax
    player.ay = 0.5 * player.ay
    player.vx = 0.98 * (player.vx + player.ax)
    player.vy = player.vy + player.ay + GRAVITY

    if grap != null
        if grap.active
            player.ax = (grap.x - player.x) * 0.001

            if grap.y > player.y
                player.ay = (grap.y - player.y) * 0.0005
            else
                player.ay = max(-0.5, (grap.y - player.y) * 0.003)
            end
        end
    end

    # Update grap

    mouse = get_mouse()

    if grap != null and mouse.down[0]
        if time - grap.time >= 50
            grap.active = false
        else
            grap.x = grap.src.x + grap.dx
            grap.y = grap.src.y + grap.dy
        end
    else
        grap = null
    end

    if mouse.pressed[0]
        if grap = null
            for word in words
                if check_grap_against(mouse.x, mouse.y, word)
                    grap = {
                        x = mouse.x
                        y = mouse.y
                        time = time
                        active = true

                        src = word
                        dx = mouse.x - word.x
                        dy = mouse.y - word.y
                    }

                    break
                end
            end
        end

        if grap = null
            for wall in walls
                if check_grap_against(mouse.x, mouse.y, wall)
                    grap = {
                        x = mouse.x
                        y = mouse.y
                        time = time
                        active = true

                        src = wall
                        dx = mouse.x - wall.x
                        dy = mouse.y - wall.y
                    }

                    break
                end
            end
        end
    end

    # Game over?

    if player.health <= 0
        player.health = 0
        gameover = 0
    end
end

func check_grap_against(x, y, obj)
    ret = x >= obj.x - obj.width / 2 - 10 and y >= obj.y - obj.height / 2 - 10 and x < obj.x + obj.width / 2 + 10 and y < obj.y + obj.height / 2 + 10
    return ret
end

func draw_game()
    # Draw background

    scale = max(window_size.width / BACKGROUNDS[background].width,
                window_size.height / BACKGROUNDS[background].height)
    draw_image(window_size.width / 2, window_size.height / 2, { align = 5, scale = scale }, BACKGROUNDS[background])

    # Draw walls

    for wall in walls
        step = 0
        len = sqrt((wall.x2 - wall.x1) * (wall.x2 - wall.x1) + (wall.y2 - wall.y1) * (wall.y2 - wall.y1))

        while step <= len
            draw_image(wall.x1 + step, wall.y1, { align = 5, scale = WALL_SCALE }, SPRITES.brick)
            step = step + SPRITES.brick.width * WALL_SCALE
        end
    end

    # Draw words

    for word in words
        draw_rectangle(word.x, word.y, word.width + 20, word.height, { color = word.color, roundness = 10, align = 5 })
        draw_text(word.x, word.y, { color = "WHITE", size = word.size, align = 5 }, upper(word.word))
    end

    # Draw player

    if grap != null
        if grap.active then draw_line(player.x, player.y, grap.x, grap.y, { color = "WHITE" })
    end
    draw_image(player.x, player.y, { align = 5, rotate = player.angle, scale = PLAYER_SCALE }, SPRITES.player)

    # Draw debug

    if show_counter then draw_text(10, 10, { color = "WHITE", size = 20 }, "Words : " + length(words))
end

func draw_gameover()
    angle = min(gameover * 10, 360 + 270)
    scale = min(0.1 + gameover * 0.04, 2)

    width = min(window_size.width / 2, gameover * 5)
    height = min(window_size.height / 2, gameover * 5)

    draw_rectangle(0, 0, width, window_size.height, { color = "BLACK" })
    draw_rectangle(window_size.width - width, 0, width, window_size.height, { color = "BLACK" })
    draw_rectangle(0, 0, window_size.width, height, { color = "BLACK" })
    draw_rectangle(0, window_size.height - height, window_size.width, height, { color = "BLACK" })

    draw_image(window_size.width / 2, window_size.height / 2, { align = 5, rotate = angle, scale = scale }, SPRITES.player)

    if gameover > 100
        text = "Press R to restart"
        draw_text(window_size.width / 2, window_size.height - 60, { align = 2, color = "WHITE" }, text)
    end
end
